<?php
/**
 * @file
 * Hooks and helper functions for the cwrc_core_tweaks module.
 */

/**
 * Implements hook_menu().
 */
function cwrc_core_tweaks_menu() {
  $items = array();

  $items['platform/info'] = array(
    'title' => 'Platform Information',
    'page callback' => 'cwrc_core_tweaks_platform_information',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['platform/stats'] = array(
    'title' => 'Platform Statistics',
    'page callback' => 'cwrc_core_tweaks_platform_statistics',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_mail_alter().
 */
function cwrc_core_tweaks_mail_alter(&$message) {
  if ($message['id'] === 'user_register_pending_approval_admin') {
    // Define a new message body.
    $body = t("[user:name] has applied for an account, with the following reason:

***
[user:field-user-registration-reason]
***

[user:edit-url]", array(), array('langcode' => $message['language']->language));

    // Replace the tokens in the message body.
    $message['body'][0] = token_replace($body, array('user' => $message['params']['account']), array(
      'language' => $message['language'],
      'sanitize' => FALSE,
      'clear' => TRUE,
    ));
  }
}

/**
 * Implements hook_menu_breadcrumb_alter().
 */
function cwrc_core_tweaks_menu_breadcrumb_alter(&$active_trail, $item) {
  // Change the title of breadcrumb items linking to the front page from "Home"
  // to "CWRC" to avoid confusion with project homepages.
  // We must check that there _are_ breadcrumbs first, as the front page notably
  // does not display them.
  if (!empty($active_trail)) {
    foreach ($active_trail as &$breadcrumb) {
      if ($breadcrumb['href'] === '<front>') {
        $breadcrumb['title'] = t('CWRC');
      }
    }
  }
}

/**
 * Implements hook_islandora_breadcrumbs_alter().
 *
 * @param array &$breadcrumbs
 *   An array of breadcrumbs.
 * @param string $context
 *   A context string.
 * @param IslandoraFedoraObject $object
 *   The Fedora object.
 */
function cwrc_core_tweaks_islandora_breadcrumbs_alter(&$breadcrumbs, $context, $object = NULL) {
  $front_page_path = url('<front>');

  // Loop through each breadcrumb. If it points to the front page, modify the
  // link text. Note that the breadcrumb comes pre-rendered to HTML with
  // already-translated strings, so we have to preg_replace() the already-
  // translated string with a different already-translated string. This is not
  // ideal, but Islandora doesn't really provide us with any better options
  // unless we patch the Islandora core module. Note also that we use the
  // Ungreedy pattern modifier for convenience.
  foreach ($breadcrumbs as &$breadcrumb) {
    if (_cwrc_menu_links_points_to_path($breadcrumb, $front_page_path)) {
      $breadcrumb = preg_replace('/' . t('Home') . '/U', t('CWRC'), $breadcrumb);
    }
  }
}

/**
 * Implements hook_user_login().
 */
function cwrc_core_tweaks_user_login(&$edit, $account) {
  // Your logic will set $redirection to the desired location.
  $redirection = 'user/my-dashboard';

  // Unless there is already a redirection going, or the user is trying to
  // reset his password, we redirect to $redirection.
  if (empty($_GET['destination']) && (!isset($_POST['form_id']) || $_POST['form_id'] !== 'user_pass_reset') && $redirection) {
    // Should we use $edit['redirect'] instead..?
    $_GET['destination'] = $redirection;
  }
}

/**
 * Platform information JSON callback.
 */
function cwrc_core_tweaks_platform_information() {
  $info = array(
    'name' => t('Canadian Writing Research Collaboratory'),
    'synopsis' => t('CWRC enables researchers investigating writing and related cultural practices to leverage the power of digital tools. It promotes best practices with respect to metadata and data formats, collaboration, interoperability, and preservation. CWRC (pronounced QUIRK) is designed to foster collaboration among individuals and research groups focused on the study of cultural artifacts. The infrastructure combines computing hardware, software, and personnel to maintain a repository linked through a web-based service-oriented architecture and RESTful applications to a toolkit that enables digital humanities (DH) research.'),
    'version' => 1.0,
    'institution' => t('University of Alberta & University of Guelph'),
    'releaseTime' => '2016-09-20T13:00:00Z',
    'researchSubject' => t('Social sciences and humanities'),
    'supportEmail' => 'cwrc@ualberta.ca',
    'tags' => array(
      t('Canadian culture & history'),
      t('cultural studies'),
      t('digital humanities'),
      t('English'),
    ),
  );
  if (!empty($_SERVER['HTTP_ACCEPT']) && $_SERVER['HTTP_ACCEPT'] === 'application/json') {
    drupal_json_output($info);
    drupal_exit();
  }

  // Reusing some of the islandora classes so that we don't have to write our
  // own css.
  drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');
  $output = '<dl class="islandora-object-fields islandora-inline-metadata" style="width: 100%; float: none;">';
  foreach ($info as $item => $value) {
    $class = 'dc-' . $item;
    $class .= $item === 'name' ? ' first' : '';
    $class = drupal_html_class($class);
    $item = ucfirst($item);
    $output .= "<dt class='{$class}'>{$item}</dt>";
    if (strtolower($item) === 'tags') {
      $output .= '<dd class="' . $class . '">' . implode(', ', $value) . '</dd>';
    }
    else {
      $output .= "<dd class='{$class}'>{$value}</dd>";
    }
  }
  $output .= '</dl>';
  return $output;
}

/**
 * Display various platform statistics.
 */
function cwrc_core_tweaks_platform_statistics() {
  $is_ga_reports_enabled = module_exists('google_analytics_reports');
  $name = 'google_analytics_reports_summary';
  $display_id = 'page';

  // When an HTTP GET is performed on this URI, and the Accept header specifies
  // JSON.
  if (!empty($_SERVER['HTTP_ACCEPT']) && $_SERVER['HTTP_ACCEPT'] === 'application/json') {
    $info = array();

    // Using data provided and gathered by the google analytics report.
    if ($is_ga_reports_enabled && ($report = views_get_view_result($name, $display_id)) && !empty($report[0])) {
      $last_time = variable_get('google_analytics_reports_metadata_last_time');
      $last_reset = format_date($last_time, 'custom', 'c') . 'Z';
      $info = array(
        'pageViews' => !empty($report[0]->pageviews) ? $report[0]->pageviews : 0,
        'lastReset' => str_replace('+00:00', '', $last_reset),
      );
    }
    drupal_json_output($info);
    drupal_exit();
  }

  // If an HTTP GET is performed and the Accept header does not indicate JSON,
  // or there is no Accept header, platforms shall return an HTML page providing
  // the information listed above in human-readable format. The content type for
  // this response should specify “text/html”.
  drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');
  $default = t('<p>No reporting functionalities was found</p>');
  $output = $is_ga_reports_enabled ? views_embed_view($name, $display_id) : $default;
  return $output ? $output : $default;
}
